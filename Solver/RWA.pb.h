// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RWA.proto

#ifndef PROTOBUF_INCLUDED_RWA_2eproto
#define PROTOBUF_INCLUDED_RWA_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_RWA_2eproto 

namespace protobuf_RWA_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[8];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_RWA_2eproto
namespace pb {
class RWA;
class RWADefaultTypeInternal;
extern RWADefaultTypeInternal _RWA_default_instance_;
class RWA_Edge;
class RWA_EdgeDefaultTypeInternal;
extern RWA_EdgeDefaultTypeInternal _RWA_Edge_default_instance_;
class RWA_Input;
class RWA_InputDefaultTypeInternal;
extern RWA_InputDefaultTypeInternal _RWA_Input_default_instance_;
class RWA_Output;
class RWA_OutputDefaultTypeInternal;
extern RWA_OutputDefaultTypeInternal _RWA_Output_default_instance_;
class RWA_Traffic;
class RWA_TrafficDefaultTypeInternal;
extern RWA_TrafficDefaultTypeInternal _RWA_Traffic_default_instance_;
class RWA_TrafficOut;
class RWA_TrafficOutDefaultTypeInternal;
extern RWA_TrafficOutDefaultTypeInternal _RWA_TrafficOut_default_instance_;
class RWA_UndirectGraph;
class RWA_UndirectGraphDefaultTypeInternal;
extern RWA_UndirectGraphDefaultTypeInternal _RWA_UndirectGraph_default_instance_;
class Submission;
class SubmissionDefaultTypeInternal;
extern SubmissionDefaultTypeInternal _Submission_default_instance_;
}  // namespace pb
namespace google {
namespace protobuf {
template<> ::pb::RWA* Arena::CreateMaybeMessage<::pb::RWA>(Arena*);
template<> ::pb::RWA_Edge* Arena::CreateMaybeMessage<::pb::RWA_Edge>(Arena*);
template<> ::pb::RWA_Input* Arena::CreateMaybeMessage<::pb::RWA_Input>(Arena*);
template<> ::pb::RWA_Output* Arena::CreateMaybeMessage<::pb::RWA_Output>(Arena*);
template<> ::pb::RWA_Traffic* Arena::CreateMaybeMessage<::pb::RWA_Traffic>(Arena*);
template<> ::pb::RWA_TrafficOut* Arena::CreateMaybeMessage<::pb::RWA_TrafficOut>(Arena*);
template<> ::pb::RWA_UndirectGraph* Arena::CreateMaybeMessage<::pb::RWA_UndirectGraph>(Arena*);
template<> ::pb::Submission* Arena::CreateMaybeMessage<::pb::Submission>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace pb {

// ===================================================================

class RWA_Input : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.RWA.Input) */ {
 public:
  RWA_Input();
  virtual ~RWA_Input();

  RWA_Input(const RWA_Input& from);

  inline RWA_Input& operator=(const RWA_Input& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RWA_Input(RWA_Input&& from) noexcept
    : RWA_Input() {
    *this = ::std::move(from);
  }

  inline RWA_Input& operator=(RWA_Input&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RWA_Input& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RWA_Input* internal_default_instance() {
    return reinterpret_cast<const RWA_Input*>(
               &_RWA_Input_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(RWA_Input* other);
  friend void swap(RWA_Input& a, RWA_Input& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RWA_Input* New() const final {
    return CreateMaybeMessage<RWA_Input>(NULL);
  }

  RWA_Input* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RWA_Input>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RWA_Input& from);
  void MergeFrom(const RWA_Input& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RWA_Input* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.RWA.Traffic traffics = 2;
  int traffics_size() const;
  void clear_traffics();
  static const int kTrafficsFieldNumber = 2;
  ::pb::RWA_Traffic* mutable_traffics(int index);
  ::google::protobuf::RepeatedPtrField< ::pb::RWA_Traffic >*
      mutable_traffics();
  const ::pb::RWA_Traffic& traffics(int index) const;
  ::pb::RWA_Traffic* add_traffics();
  const ::google::protobuf::RepeatedPtrField< ::pb::RWA_Traffic >&
      traffics() const;

  // .pb.RWA.UndirectGraph graph = 1;
  bool has_graph() const;
  void clear_graph();
  static const int kGraphFieldNumber = 1;
  private:
  const ::pb::RWA_UndirectGraph& _internal_graph() const;
  public:
  const ::pb::RWA_UndirectGraph& graph() const;
  ::pb::RWA_UndirectGraph* release_graph();
  ::pb::RWA_UndirectGraph* mutable_graph();
  void set_allocated_graph(::pb::RWA_UndirectGraph* graph);

  // @@protoc_insertion_point(class_scope:pb.RWA.Input)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::pb::RWA_Traffic > traffics_;
  ::pb::RWA_UndirectGraph* graph_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_RWA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RWA_Traffic : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.RWA.Traffic) */ {
 public:
  RWA_Traffic();
  virtual ~RWA_Traffic();

  RWA_Traffic(const RWA_Traffic& from);

  inline RWA_Traffic& operator=(const RWA_Traffic& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RWA_Traffic(RWA_Traffic&& from) noexcept
    : RWA_Traffic() {
    *this = ::std::move(from);
  }

  inline RWA_Traffic& operator=(RWA_Traffic&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RWA_Traffic& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RWA_Traffic* internal_default_instance() {
    return reinterpret_cast<const RWA_Traffic*>(
               &_RWA_Traffic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(RWA_Traffic* other);
  friend void swap(RWA_Traffic& a, RWA_Traffic& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RWA_Traffic* New() const final {
    return CreateMaybeMessage<RWA_Traffic>(NULL);
  }

  RWA_Traffic* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RWA_Traffic>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RWA_Traffic& from);
  void MergeFrom(const RWA_Traffic& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RWA_Traffic* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 ID = 1;
  void clear_id();
  static const int kIDFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // int32 src = 2;
  void clear_src();
  static const int kSrcFieldNumber = 2;
  ::google::protobuf::int32 src() const;
  void set_src(::google::protobuf::int32 value);

  // int32 dst = 3;
  void clear_dst();
  static const int kDstFieldNumber = 3;
  ::google::protobuf::int32 dst() const;
  void set_dst(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.RWA.Traffic)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 src_;
  ::google::protobuf::int32 dst_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_RWA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RWA_Output : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.RWA.Output) */ {
 public:
  RWA_Output();
  virtual ~RWA_Output();

  RWA_Output(const RWA_Output& from);

  inline RWA_Output& operator=(const RWA_Output& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RWA_Output(RWA_Output&& from) noexcept
    : RWA_Output() {
    *this = ::std::move(from);
  }

  inline RWA_Output& operator=(RWA_Output&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RWA_Output& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RWA_Output* internal_default_instance() {
    return reinterpret_cast<const RWA_Output*>(
               &_RWA_Output_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(RWA_Output* other);
  friend void swap(RWA_Output& a, RWA_Output& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RWA_Output* New() const final {
    return CreateMaybeMessage<RWA_Output>(NULL);
  }

  RWA_Output* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RWA_Output>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RWA_Output& from);
  void MergeFrom(const RWA_Output& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RWA_Output* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.RWA.TrafficOut traOut = 1;
  int traout_size() const;
  void clear_traout();
  static const int kTraOutFieldNumber = 1;
  ::pb::RWA_TrafficOut* mutable_traout(int index);
  ::google::protobuf::RepeatedPtrField< ::pb::RWA_TrafficOut >*
      mutable_traout();
  const ::pb::RWA_TrafficOut& traout(int index) const;
  ::pb::RWA_TrafficOut* add_traout();
  const ::google::protobuf::RepeatedPtrField< ::pb::RWA_TrafficOut >&
      traout() const;

  // @@protoc_insertion_point(class_scope:pb.RWA.Output)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::pb::RWA_TrafficOut > traout_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_RWA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RWA_TrafficOut : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.RWA.TrafficOut) */ {
 public:
  RWA_TrafficOut();
  virtual ~RWA_TrafficOut();

  RWA_TrafficOut(const RWA_TrafficOut& from);

  inline RWA_TrafficOut& operator=(const RWA_TrafficOut& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RWA_TrafficOut(RWA_TrafficOut&& from) noexcept
    : RWA_TrafficOut() {
    *this = ::std::move(from);
  }

  inline RWA_TrafficOut& operator=(RWA_TrafficOut&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RWA_TrafficOut& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RWA_TrafficOut* internal_default_instance() {
    return reinterpret_cast<const RWA_TrafficOut*>(
               &_RWA_TrafficOut_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(RWA_TrafficOut* other);
  friend void swap(RWA_TrafficOut& a, RWA_TrafficOut& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RWA_TrafficOut* New() const final {
    return CreateMaybeMessage<RWA_TrafficOut>(NULL);
  }

  RWA_TrafficOut* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RWA_TrafficOut>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RWA_TrafficOut& from);
  void MergeFrom(const RWA_TrafficOut& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RWA_TrafficOut* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 path = 1;
  int path_size() const;
  void clear_path();
  static const int kPathFieldNumber = 1;
  ::google::protobuf::int32 path(int index) const;
  void set_path(int index, ::google::protobuf::int32 value);
  void add_path(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      path() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_path();

  // int32 wave = 2;
  void clear_wave();
  static const int kWaveFieldNumber = 2;
  ::google::protobuf::int32 wave() const;
  void set_wave(::google::protobuf::int32 value);

  // int32 ID = 3;
  void clear_id();
  static const int kIDFieldNumber = 3;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.RWA.TrafficOut)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > path_;
  mutable int _path_cached_byte_size_;
  ::google::protobuf::int32 wave_;
  ::google::protobuf::int32 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_RWA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RWA_UndirectGraph : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.RWA.UndirectGraph) */ {
 public:
  RWA_UndirectGraph();
  virtual ~RWA_UndirectGraph();

  RWA_UndirectGraph(const RWA_UndirectGraph& from);

  inline RWA_UndirectGraph& operator=(const RWA_UndirectGraph& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RWA_UndirectGraph(RWA_UndirectGraph&& from) noexcept
    : RWA_UndirectGraph() {
    *this = ::std::move(from);
  }

  inline RWA_UndirectGraph& operator=(RWA_UndirectGraph&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RWA_UndirectGraph& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RWA_UndirectGraph* internal_default_instance() {
    return reinterpret_cast<const RWA_UndirectGraph*>(
               &_RWA_UndirectGraph_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(RWA_UndirectGraph* other);
  friend void swap(RWA_UndirectGraph& a, RWA_UndirectGraph& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RWA_UndirectGraph* New() const final {
    return CreateMaybeMessage<RWA_UndirectGraph>(NULL);
  }

  RWA_UndirectGraph* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RWA_UndirectGraph>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RWA_UndirectGraph& from);
  void MergeFrom(const RWA_UndirectGraph& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RWA_UndirectGraph* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.RWA.Edge edges = 1;
  int edges_size() const;
  void clear_edges();
  static const int kEdgesFieldNumber = 1;
  ::pb::RWA_Edge* mutable_edges(int index);
  ::google::protobuf::RepeatedPtrField< ::pb::RWA_Edge >*
      mutable_edges();
  const ::pb::RWA_Edge& edges(int index) const;
  ::pb::RWA_Edge* add_edges();
  const ::google::protobuf::RepeatedPtrField< ::pb::RWA_Edge >&
      edges() const;

  // int32 nodeNum = 2;
  void clear_nodenum();
  static const int kNodeNumFieldNumber = 2;
  ::google::protobuf::int32 nodenum() const;
  void set_nodenum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.RWA.UndirectGraph)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::pb::RWA_Edge > edges_;
  ::google::protobuf::int32 nodenum_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_RWA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RWA_Edge : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.RWA.Edge) */ {
 public:
  RWA_Edge();
  virtual ~RWA_Edge();

  RWA_Edge(const RWA_Edge& from);

  inline RWA_Edge& operator=(const RWA_Edge& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RWA_Edge(RWA_Edge&& from) noexcept
    : RWA_Edge() {
    *this = ::std::move(from);
  }

  inline RWA_Edge& operator=(RWA_Edge&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RWA_Edge& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RWA_Edge* internal_default_instance() {
    return reinterpret_cast<const RWA_Edge*>(
               &_RWA_Edge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(RWA_Edge* other);
  friend void swap(RWA_Edge& a, RWA_Edge& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RWA_Edge* New() const final {
    return CreateMaybeMessage<RWA_Edge>(NULL);
  }

  RWA_Edge* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RWA_Edge>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RWA_Edge& from);
  void MergeFrom(const RWA_Edge& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RWA_Edge* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 source = 1;
  void clear_source();
  static const int kSourceFieldNumber = 1;
  ::google::protobuf::int32 source() const;
  void set_source(::google::protobuf::int32 value);

  // int32 target = 2;
  void clear_target();
  static const int kTargetFieldNumber = 2;
  ::google::protobuf::int32 target() const;
  void set_target(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.RWA.Edge)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 source_;
  ::google::protobuf::int32 target_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_RWA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RWA : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.RWA) */ {
 public:
  RWA();
  virtual ~RWA();

  RWA(const RWA& from);

  inline RWA& operator=(const RWA& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RWA(RWA&& from) noexcept
    : RWA() {
    *this = ::std::move(from);
  }

  inline RWA& operator=(RWA&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RWA& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RWA* internal_default_instance() {
    return reinterpret_cast<const RWA*>(
               &_RWA_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(RWA* other);
  friend void swap(RWA& a, RWA& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RWA* New() const final {
    return CreateMaybeMessage<RWA>(NULL);
  }

  RWA* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RWA>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RWA& from);
  void MergeFrom(const RWA& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RWA* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RWA_Input Input;
  typedef RWA_Traffic Traffic;
  typedef RWA_Output Output;
  typedef RWA_TrafficOut TrafficOut;
  typedef RWA_UndirectGraph UndirectGraph;
  typedef RWA_Edge Edge;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pb.RWA)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_RWA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Submission : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.Submission) */ {
 public:
  Submission();
  virtual ~Submission();

  Submission(const Submission& from);

  inline Submission& operator=(const Submission& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Submission(Submission&& from) noexcept
    : Submission() {
    *this = ::std::move(from);
  }

  inline Submission& operator=(Submission&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Submission& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Submission* internal_default_instance() {
    return reinterpret_cast<const Submission*>(
               &_Submission_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(Submission* other);
  friend void swap(Submission& a, Submission& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Submission* New() const final {
    return CreateMaybeMessage<Submission>(NULL);
  }

  Submission* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Submission>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Submission& from);
  void MergeFrom(const Submission& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Submission* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string author = 1;
  void clear_author();
  static const int kAuthorFieldNumber = 1;
  const ::std::string& author() const;
  void set_author(const ::std::string& value);
  #if LANG_CXX11
  void set_author(::std::string&& value);
  #endif
  void set_author(const char* value);
  void set_author(const char* value, size_t size);
  ::std::string* mutable_author();
  ::std::string* release_author();
  void set_allocated_author(::std::string* author);

  // string algorithm = 2;
  void clear_algorithm();
  static const int kAlgorithmFieldNumber = 2;
  const ::std::string& algorithm() const;
  void set_algorithm(const ::std::string& value);
  #if LANG_CXX11
  void set_algorithm(::std::string&& value);
  #endif
  void set_algorithm(const char* value);
  void set_algorithm(const char* value, size_t size);
  ::std::string* mutable_algorithm();
  ::std::string* release_algorithm();
  void set_allocated_algorithm(::std::string* algorithm);

  // string thread = 3;
  void clear_thread();
  static const int kThreadFieldNumber = 3;
  const ::std::string& thread() const;
  void set_thread(const ::std::string& value);
  #if LANG_CXX11
  void set_thread(::std::string&& value);
  #endif
  void set_thread(const char* value);
  void set_thread(const char* value, size_t size);
  ::std::string* mutable_thread();
  ::std::string* release_thread();
  void set_allocated_thread(::std::string* thread);

  // string cpu = 4;
  void clear_cpu();
  static const int kCpuFieldNumber = 4;
  const ::std::string& cpu() const;
  void set_cpu(const ::std::string& value);
  #if LANG_CXX11
  void set_cpu(::std::string&& value);
  #endif
  void set_cpu(const char* value);
  void set_cpu(const char* value, size_t size);
  ::std::string* mutable_cpu();
  ::std::string* release_cpu();
  void set_allocated_cpu(::std::string* cpu);

  // string ram = 5;
  void clear_ram();
  static const int kRamFieldNumber = 5;
  const ::std::string& ram() const;
  void set_ram(const ::std::string& value);
  #if LANG_CXX11
  void set_ram(::std::string&& value);
  #endif
  void set_ram(const char* value);
  void set_ram(const char* value, size_t size);
  ::std::string* mutable_ram();
  ::std::string* release_ram();
  void set_allocated_ram(::std::string* ram);

  // string language = 6;
  void clear_language();
  static const int kLanguageFieldNumber = 6;
  const ::std::string& language() const;
  void set_language(const ::std::string& value);
  #if LANG_CXX11
  void set_language(::std::string&& value);
  #endif
  void set_language(const char* value);
  void set_language(const char* value, size_t size);
  ::std::string* mutable_language();
  ::std::string* release_language();
  void set_allocated_language(::std::string* language);

  // string compiler = 7;
  void clear_compiler();
  static const int kCompilerFieldNumber = 7;
  const ::std::string& compiler() const;
  void set_compiler(const ::std::string& value);
  #if LANG_CXX11
  void set_compiler(::std::string&& value);
  #endif
  void set_compiler(const char* value);
  void set_compiler(const char* value, size_t size);
  ::std::string* mutable_compiler();
  ::std::string* release_compiler();
  void set_allocated_compiler(::std::string* compiler);

  // string os = 8;
  void clear_os();
  static const int kOsFieldNumber = 8;
  const ::std::string& os() const;
  void set_os(const ::std::string& value);
  #if LANG_CXX11
  void set_os(::std::string&& value);
  #endif
  void set_os(const char* value);
  void set_os(const char* value, size_t size);
  ::std::string* mutable_os();
  ::std::string* release_os();
  void set_allocated_os(::std::string* os);

  // string problem = 21;
  void clear_problem();
  static const int kProblemFieldNumber = 21;
  const ::std::string& problem() const;
  void set_problem(const ::std::string& value);
  #if LANG_CXX11
  void set_problem(::std::string&& value);
  #endif
  void set_problem(const char* value);
  void set_problem(const char* value, size_t size);
  ::std::string* mutable_problem();
  ::std::string* release_problem();
  void set_allocated_problem(::std::string* problem);

  // string instance = 22;
  void clear_instance();
  static const int kInstanceFieldNumber = 22;
  const ::std::string& instance() const;
  void set_instance(const ::std::string& value);
  #if LANG_CXX11
  void set_instance(::std::string&& value);
  #endif
  void set_instance(const char* value);
  void set_instance(const char* value, size_t size);
  ::std::string* mutable_instance();
  ::std::string* release_instance();
  void set_allocated_instance(::std::string* instance);

  // string duration = 23;
  void clear_duration();
  static const int kDurationFieldNumber = 23;
  const ::std::string& duration() const;
  void set_duration(const ::std::string& value);
  #if LANG_CXX11
  void set_duration(::std::string&& value);
  #endif
  void set_duration(const char* value);
  void set_duration(const char* value, size_t size);
  ::std::string* mutable_duration();
  ::std::string* release_duration();
  void set_allocated_duration(::std::string* duration);

  // string email = 32;
  void clear_email();
  static const int kEmailFieldNumber = 32;
  const ::std::string& email() const;
  void set_email(const ::std::string& value);
  #if LANG_CXX11
  void set_email(::std::string&& value);
  #endif
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  ::std::string* mutable_email();
  ::std::string* release_email();
  void set_allocated_email(::std::string* email);

  // string date = 33;
  void clear_date();
  static const int kDateFieldNumber = 33;
  const ::std::string& date() const;
  void set_date(const ::std::string& value);
  #if LANG_CXX11
  void set_date(::std::string&& value);
  #endif
  void set_date(const char* value);
  void set_date(const char* value, size_t size);
  ::std::string* mutable_date();
  ::std::string* release_date();
  void set_allocated_date(::std::string* date);

  // double obj = 31;
  void clear_obj();
  static const int kObjFieldNumber = 31;
  double obj() const;
  void set_obj(double value);

  // @@protoc_insertion_point(class_scope:pb.Submission)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr author_;
  ::google::protobuf::internal::ArenaStringPtr algorithm_;
  ::google::protobuf::internal::ArenaStringPtr thread_;
  ::google::protobuf::internal::ArenaStringPtr cpu_;
  ::google::protobuf::internal::ArenaStringPtr ram_;
  ::google::protobuf::internal::ArenaStringPtr language_;
  ::google::protobuf::internal::ArenaStringPtr compiler_;
  ::google::protobuf::internal::ArenaStringPtr os_;
  ::google::protobuf::internal::ArenaStringPtr problem_;
  ::google::protobuf::internal::ArenaStringPtr instance_;
  ::google::protobuf::internal::ArenaStringPtr duration_;
  ::google::protobuf::internal::ArenaStringPtr email_;
  ::google::protobuf::internal::ArenaStringPtr date_;
  double obj_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_RWA_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RWA_Input

// .pb.RWA.UndirectGraph graph = 1;
inline bool RWA_Input::has_graph() const {
  return this != internal_default_instance() && graph_ != NULL;
}
inline void RWA_Input::clear_graph() {
  if (GetArenaNoVirtual() == NULL && graph_ != NULL) {
    delete graph_;
  }
  graph_ = NULL;
}
inline const ::pb::RWA_UndirectGraph& RWA_Input::_internal_graph() const {
  return *graph_;
}
inline const ::pb::RWA_UndirectGraph& RWA_Input::graph() const {
  const ::pb::RWA_UndirectGraph* p = graph_;
  // @@protoc_insertion_point(field_get:pb.RWA.Input.graph)
  return p != NULL ? *p : *reinterpret_cast<const ::pb::RWA_UndirectGraph*>(
      &::pb::_RWA_UndirectGraph_default_instance_);
}
inline ::pb::RWA_UndirectGraph* RWA_Input::release_graph() {
  // @@protoc_insertion_point(field_release:pb.RWA.Input.graph)
  
  ::pb::RWA_UndirectGraph* temp = graph_;
  graph_ = NULL;
  return temp;
}
inline ::pb::RWA_UndirectGraph* RWA_Input::mutable_graph() {
  
  if (graph_ == NULL) {
    auto* p = CreateMaybeMessage<::pb::RWA_UndirectGraph>(GetArenaNoVirtual());
    graph_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.RWA.Input.graph)
  return graph_;
}
inline void RWA_Input::set_allocated_graph(::pb::RWA_UndirectGraph* graph) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete graph_;
  }
  if (graph) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      graph = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, graph, submessage_arena);
    }
    
  } else {
    
  }
  graph_ = graph;
  // @@protoc_insertion_point(field_set_allocated:pb.RWA.Input.graph)
}

// repeated .pb.RWA.Traffic traffics = 2;
inline int RWA_Input::traffics_size() const {
  return traffics_.size();
}
inline void RWA_Input::clear_traffics() {
  traffics_.Clear();
}
inline ::pb::RWA_Traffic* RWA_Input::mutable_traffics(int index) {
  // @@protoc_insertion_point(field_mutable:pb.RWA.Input.traffics)
  return traffics_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb::RWA_Traffic >*
RWA_Input::mutable_traffics() {
  // @@protoc_insertion_point(field_mutable_list:pb.RWA.Input.traffics)
  return &traffics_;
}
inline const ::pb::RWA_Traffic& RWA_Input::traffics(int index) const {
  // @@protoc_insertion_point(field_get:pb.RWA.Input.traffics)
  return traffics_.Get(index);
}
inline ::pb::RWA_Traffic* RWA_Input::add_traffics() {
  // @@protoc_insertion_point(field_add:pb.RWA.Input.traffics)
  return traffics_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::RWA_Traffic >&
RWA_Input::traffics() const {
  // @@protoc_insertion_point(field_list:pb.RWA.Input.traffics)
  return traffics_;
}

// -------------------------------------------------------------------

// RWA_Traffic

// int32 ID = 1;
inline void RWA_Traffic::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 RWA_Traffic::id() const {
  // @@protoc_insertion_point(field_get:pb.RWA.Traffic.ID)
  return id_;
}
inline void RWA_Traffic::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.RWA.Traffic.ID)
}

// int32 src = 2;
inline void RWA_Traffic::clear_src() {
  src_ = 0;
}
inline ::google::protobuf::int32 RWA_Traffic::src() const {
  // @@protoc_insertion_point(field_get:pb.RWA.Traffic.src)
  return src_;
}
inline void RWA_Traffic::set_src(::google::protobuf::int32 value) {
  
  src_ = value;
  // @@protoc_insertion_point(field_set:pb.RWA.Traffic.src)
}

// int32 dst = 3;
inline void RWA_Traffic::clear_dst() {
  dst_ = 0;
}
inline ::google::protobuf::int32 RWA_Traffic::dst() const {
  // @@protoc_insertion_point(field_get:pb.RWA.Traffic.dst)
  return dst_;
}
inline void RWA_Traffic::set_dst(::google::protobuf::int32 value) {
  
  dst_ = value;
  // @@protoc_insertion_point(field_set:pb.RWA.Traffic.dst)
}

// -------------------------------------------------------------------

// RWA_Output

// repeated .pb.RWA.TrafficOut traOut = 1;
inline int RWA_Output::traout_size() const {
  return traout_.size();
}
inline void RWA_Output::clear_traout() {
  traout_.Clear();
}
inline ::pb::RWA_TrafficOut* RWA_Output::mutable_traout(int index) {
  // @@protoc_insertion_point(field_mutable:pb.RWA.Output.traOut)
  return traout_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb::RWA_TrafficOut >*
RWA_Output::mutable_traout() {
  // @@protoc_insertion_point(field_mutable_list:pb.RWA.Output.traOut)
  return &traout_;
}
inline const ::pb::RWA_TrafficOut& RWA_Output::traout(int index) const {
  // @@protoc_insertion_point(field_get:pb.RWA.Output.traOut)
  return traout_.Get(index);
}
inline ::pb::RWA_TrafficOut* RWA_Output::add_traout() {
  // @@protoc_insertion_point(field_add:pb.RWA.Output.traOut)
  return traout_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::RWA_TrafficOut >&
RWA_Output::traout() const {
  // @@protoc_insertion_point(field_list:pb.RWA.Output.traOut)
  return traout_;
}

// -------------------------------------------------------------------

// RWA_TrafficOut

// repeated int32 path = 1;
inline int RWA_TrafficOut::path_size() const {
  return path_.size();
}
inline void RWA_TrafficOut::clear_path() {
  path_.Clear();
}
inline ::google::protobuf::int32 RWA_TrafficOut::path(int index) const {
  // @@protoc_insertion_point(field_get:pb.RWA.TrafficOut.path)
  return path_.Get(index);
}
inline void RWA_TrafficOut::set_path(int index, ::google::protobuf::int32 value) {
  path_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.RWA.TrafficOut.path)
}
inline void RWA_TrafficOut::add_path(::google::protobuf::int32 value) {
  path_.Add(value);
  // @@protoc_insertion_point(field_add:pb.RWA.TrafficOut.path)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RWA_TrafficOut::path() const {
  // @@protoc_insertion_point(field_list:pb.RWA.TrafficOut.path)
  return path_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RWA_TrafficOut::mutable_path() {
  // @@protoc_insertion_point(field_mutable_list:pb.RWA.TrafficOut.path)
  return &path_;
}

// int32 wave = 2;
inline void RWA_TrafficOut::clear_wave() {
  wave_ = 0;
}
inline ::google::protobuf::int32 RWA_TrafficOut::wave() const {
  // @@protoc_insertion_point(field_get:pb.RWA.TrafficOut.wave)
  return wave_;
}
inline void RWA_TrafficOut::set_wave(::google::protobuf::int32 value) {
  
  wave_ = value;
  // @@protoc_insertion_point(field_set:pb.RWA.TrafficOut.wave)
}

// int32 ID = 3;
inline void RWA_TrafficOut::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 RWA_TrafficOut::id() const {
  // @@protoc_insertion_point(field_get:pb.RWA.TrafficOut.ID)
  return id_;
}
inline void RWA_TrafficOut::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.RWA.TrafficOut.ID)
}

// -------------------------------------------------------------------

// RWA_UndirectGraph

// repeated .pb.RWA.Edge edges = 1;
inline int RWA_UndirectGraph::edges_size() const {
  return edges_.size();
}
inline void RWA_UndirectGraph::clear_edges() {
  edges_.Clear();
}
inline ::pb::RWA_Edge* RWA_UndirectGraph::mutable_edges(int index) {
  // @@protoc_insertion_point(field_mutable:pb.RWA.UndirectGraph.edges)
  return edges_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb::RWA_Edge >*
RWA_UndirectGraph::mutable_edges() {
  // @@protoc_insertion_point(field_mutable_list:pb.RWA.UndirectGraph.edges)
  return &edges_;
}
inline const ::pb::RWA_Edge& RWA_UndirectGraph::edges(int index) const {
  // @@protoc_insertion_point(field_get:pb.RWA.UndirectGraph.edges)
  return edges_.Get(index);
}
inline ::pb::RWA_Edge* RWA_UndirectGraph::add_edges() {
  // @@protoc_insertion_point(field_add:pb.RWA.UndirectGraph.edges)
  return edges_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::RWA_Edge >&
RWA_UndirectGraph::edges() const {
  // @@protoc_insertion_point(field_list:pb.RWA.UndirectGraph.edges)
  return edges_;
}

// int32 nodeNum = 2;
inline void RWA_UndirectGraph::clear_nodenum() {
  nodenum_ = 0;
}
inline ::google::protobuf::int32 RWA_UndirectGraph::nodenum() const {
  // @@protoc_insertion_point(field_get:pb.RWA.UndirectGraph.nodeNum)
  return nodenum_;
}
inline void RWA_UndirectGraph::set_nodenum(::google::protobuf::int32 value) {
  
  nodenum_ = value;
  // @@protoc_insertion_point(field_set:pb.RWA.UndirectGraph.nodeNum)
}

// -------------------------------------------------------------------

// RWA_Edge

// int32 source = 1;
inline void RWA_Edge::clear_source() {
  source_ = 0;
}
inline ::google::protobuf::int32 RWA_Edge::source() const {
  // @@protoc_insertion_point(field_get:pb.RWA.Edge.source)
  return source_;
}
inline void RWA_Edge::set_source(::google::protobuf::int32 value) {
  
  source_ = value;
  // @@protoc_insertion_point(field_set:pb.RWA.Edge.source)
}

// int32 target = 2;
inline void RWA_Edge::clear_target() {
  target_ = 0;
}
inline ::google::protobuf::int32 RWA_Edge::target() const {
  // @@protoc_insertion_point(field_get:pb.RWA.Edge.target)
  return target_;
}
inline void RWA_Edge::set_target(::google::protobuf::int32 value) {
  
  target_ = value;
  // @@protoc_insertion_point(field_set:pb.RWA.Edge.target)
}

// -------------------------------------------------------------------

// RWA

// -------------------------------------------------------------------

// Submission

// string author = 1;
inline void Submission::clear_author() {
  author_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Submission::author() const {
  // @@protoc_insertion_point(field_get:pb.Submission.author)
  return author_.GetNoArena();
}
inline void Submission::set_author(const ::std::string& value) {
  
  author_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Submission.author)
}
#if LANG_CXX11
inline void Submission::set_author(::std::string&& value) {
  
  author_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Submission.author)
}
#endif
inline void Submission::set_author(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  author_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Submission.author)
}
inline void Submission::set_author(const char* value, size_t size) {
  
  author_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Submission.author)
}
inline ::std::string* Submission::mutable_author() {
  
  // @@protoc_insertion_point(field_mutable:pb.Submission.author)
  return author_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Submission::release_author() {
  // @@protoc_insertion_point(field_release:pb.Submission.author)
  
  return author_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Submission::set_allocated_author(::std::string* author) {
  if (author != NULL) {
    
  } else {
    
  }
  author_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), author);
  // @@protoc_insertion_point(field_set_allocated:pb.Submission.author)
}

// string algorithm = 2;
inline void Submission::clear_algorithm() {
  algorithm_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Submission::algorithm() const {
  // @@protoc_insertion_point(field_get:pb.Submission.algorithm)
  return algorithm_.GetNoArena();
}
inline void Submission::set_algorithm(const ::std::string& value) {
  
  algorithm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Submission.algorithm)
}
#if LANG_CXX11
inline void Submission::set_algorithm(::std::string&& value) {
  
  algorithm_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Submission.algorithm)
}
#endif
inline void Submission::set_algorithm(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  algorithm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Submission.algorithm)
}
inline void Submission::set_algorithm(const char* value, size_t size) {
  
  algorithm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Submission.algorithm)
}
inline ::std::string* Submission::mutable_algorithm() {
  
  // @@protoc_insertion_point(field_mutable:pb.Submission.algorithm)
  return algorithm_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Submission::release_algorithm() {
  // @@protoc_insertion_point(field_release:pb.Submission.algorithm)
  
  return algorithm_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Submission::set_allocated_algorithm(::std::string* algorithm) {
  if (algorithm != NULL) {
    
  } else {
    
  }
  algorithm_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), algorithm);
  // @@protoc_insertion_point(field_set_allocated:pb.Submission.algorithm)
}

// string thread = 3;
inline void Submission::clear_thread() {
  thread_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Submission::thread() const {
  // @@protoc_insertion_point(field_get:pb.Submission.thread)
  return thread_.GetNoArena();
}
inline void Submission::set_thread(const ::std::string& value) {
  
  thread_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Submission.thread)
}
#if LANG_CXX11
inline void Submission::set_thread(::std::string&& value) {
  
  thread_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Submission.thread)
}
#endif
inline void Submission::set_thread(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  thread_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Submission.thread)
}
inline void Submission::set_thread(const char* value, size_t size) {
  
  thread_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Submission.thread)
}
inline ::std::string* Submission::mutable_thread() {
  
  // @@protoc_insertion_point(field_mutable:pb.Submission.thread)
  return thread_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Submission::release_thread() {
  // @@protoc_insertion_point(field_release:pb.Submission.thread)
  
  return thread_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Submission::set_allocated_thread(::std::string* thread) {
  if (thread != NULL) {
    
  } else {
    
  }
  thread_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), thread);
  // @@protoc_insertion_point(field_set_allocated:pb.Submission.thread)
}

// string cpu = 4;
inline void Submission::clear_cpu() {
  cpu_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Submission::cpu() const {
  // @@protoc_insertion_point(field_get:pb.Submission.cpu)
  return cpu_.GetNoArena();
}
inline void Submission::set_cpu(const ::std::string& value) {
  
  cpu_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Submission.cpu)
}
#if LANG_CXX11
inline void Submission::set_cpu(::std::string&& value) {
  
  cpu_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Submission.cpu)
}
#endif
inline void Submission::set_cpu(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cpu_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Submission.cpu)
}
inline void Submission::set_cpu(const char* value, size_t size) {
  
  cpu_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Submission.cpu)
}
inline ::std::string* Submission::mutable_cpu() {
  
  // @@protoc_insertion_point(field_mutable:pb.Submission.cpu)
  return cpu_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Submission::release_cpu() {
  // @@protoc_insertion_point(field_release:pb.Submission.cpu)
  
  return cpu_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Submission::set_allocated_cpu(::std::string* cpu) {
  if (cpu != NULL) {
    
  } else {
    
  }
  cpu_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cpu);
  // @@protoc_insertion_point(field_set_allocated:pb.Submission.cpu)
}

// string ram = 5;
inline void Submission::clear_ram() {
  ram_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Submission::ram() const {
  // @@protoc_insertion_point(field_get:pb.Submission.ram)
  return ram_.GetNoArena();
}
inline void Submission::set_ram(const ::std::string& value) {
  
  ram_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Submission.ram)
}
#if LANG_CXX11
inline void Submission::set_ram(::std::string&& value) {
  
  ram_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Submission.ram)
}
#endif
inline void Submission::set_ram(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ram_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Submission.ram)
}
inline void Submission::set_ram(const char* value, size_t size) {
  
  ram_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Submission.ram)
}
inline ::std::string* Submission::mutable_ram() {
  
  // @@protoc_insertion_point(field_mutable:pb.Submission.ram)
  return ram_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Submission::release_ram() {
  // @@protoc_insertion_point(field_release:pb.Submission.ram)
  
  return ram_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Submission::set_allocated_ram(::std::string* ram) {
  if (ram != NULL) {
    
  } else {
    
  }
  ram_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ram);
  // @@protoc_insertion_point(field_set_allocated:pb.Submission.ram)
}

// string language = 6;
inline void Submission::clear_language() {
  language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Submission::language() const {
  // @@protoc_insertion_point(field_get:pb.Submission.language)
  return language_.GetNoArena();
}
inline void Submission::set_language(const ::std::string& value) {
  
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Submission.language)
}
#if LANG_CXX11
inline void Submission::set_language(::std::string&& value) {
  
  language_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Submission.language)
}
#endif
inline void Submission::set_language(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Submission.language)
}
inline void Submission::set_language(const char* value, size_t size) {
  
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Submission.language)
}
inline ::std::string* Submission::mutable_language() {
  
  // @@protoc_insertion_point(field_mutable:pb.Submission.language)
  return language_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Submission::release_language() {
  // @@protoc_insertion_point(field_release:pb.Submission.language)
  
  return language_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Submission::set_allocated_language(::std::string* language) {
  if (language != NULL) {
    
  } else {
    
  }
  language_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), language);
  // @@protoc_insertion_point(field_set_allocated:pb.Submission.language)
}

// string compiler = 7;
inline void Submission::clear_compiler() {
  compiler_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Submission::compiler() const {
  // @@protoc_insertion_point(field_get:pb.Submission.compiler)
  return compiler_.GetNoArena();
}
inline void Submission::set_compiler(const ::std::string& value) {
  
  compiler_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Submission.compiler)
}
#if LANG_CXX11
inline void Submission::set_compiler(::std::string&& value) {
  
  compiler_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Submission.compiler)
}
#endif
inline void Submission::set_compiler(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  compiler_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Submission.compiler)
}
inline void Submission::set_compiler(const char* value, size_t size) {
  
  compiler_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Submission.compiler)
}
inline ::std::string* Submission::mutable_compiler() {
  
  // @@protoc_insertion_point(field_mutable:pb.Submission.compiler)
  return compiler_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Submission::release_compiler() {
  // @@protoc_insertion_point(field_release:pb.Submission.compiler)
  
  return compiler_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Submission::set_allocated_compiler(::std::string* compiler) {
  if (compiler != NULL) {
    
  } else {
    
  }
  compiler_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), compiler);
  // @@protoc_insertion_point(field_set_allocated:pb.Submission.compiler)
}

// string os = 8;
inline void Submission::clear_os() {
  os_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Submission::os() const {
  // @@protoc_insertion_point(field_get:pb.Submission.os)
  return os_.GetNoArena();
}
inline void Submission::set_os(const ::std::string& value) {
  
  os_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Submission.os)
}
#if LANG_CXX11
inline void Submission::set_os(::std::string&& value) {
  
  os_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Submission.os)
}
#endif
inline void Submission::set_os(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  os_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Submission.os)
}
inline void Submission::set_os(const char* value, size_t size) {
  
  os_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Submission.os)
}
inline ::std::string* Submission::mutable_os() {
  
  // @@protoc_insertion_point(field_mutable:pb.Submission.os)
  return os_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Submission::release_os() {
  // @@protoc_insertion_point(field_release:pb.Submission.os)
  
  return os_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Submission::set_allocated_os(::std::string* os) {
  if (os != NULL) {
    
  } else {
    
  }
  os_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), os);
  // @@protoc_insertion_point(field_set_allocated:pb.Submission.os)
}

// string problem = 21;
inline void Submission::clear_problem() {
  problem_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Submission::problem() const {
  // @@protoc_insertion_point(field_get:pb.Submission.problem)
  return problem_.GetNoArena();
}
inline void Submission::set_problem(const ::std::string& value) {
  
  problem_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Submission.problem)
}
#if LANG_CXX11
inline void Submission::set_problem(::std::string&& value) {
  
  problem_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Submission.problem)
}
#endif
inline void Submission::set_problem(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  problem_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Submission.problem)
}
inline void Submission::set_problem(const char* value, size_t size) {
  
  problem_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Submission.problem)
}
inline ::std::string* Submission::mutable_problem() {
  
  // @@protoc_insertion_point(field_mutable:pb.Submission.problem)
  return problem_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Submission::release_problem() {
  // @@protoc_insertion_point(field_release:pb.Submission.problem)
  
  return problem_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Submission::set_allocated_problem(::std::string* problem) {
  if (problem != NULL) {
    
  } else {
    
  }
  problem_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), problem);
  // @@protoc_insertion_point(field_set_allocated:pb.Submission.problem)
}

// string instance = 22;
inline void Submission::clear_instance() {
  instance_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Submission::instance() const {
  // @@protoc_insertion_point(field_get:pb.Submission.instance)
  return instance_.GetNoArena();
}
inline void Submission::set_instance(const ::std::string& value) {
  
  instance_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Submission.instance)
}
#if LANG_CXX11
inline void Submission::set_instance(::std::string&& value) {
  
  instance_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Submission.instance)
}
#endif
inline void Submission::set_instance(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  instance_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Submission.instance)
}
inline void Submission::set_instance(const char* value, size_t size) {
  
  instance_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Submission.instance)
}
inline ::std::string* Submission::mutable_instance() {
  
  // @@protoc_insertion_point(field_mutable:pb.Submission.instance)
  return instance_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Submission::release_instance() {
  // @@protoc_insertion_point(field_release:pb.Submission.instance)
  
  return instance_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Submission::set_allocated_instance(::std::string* instance) {
  if (instance != NULL) {
    
  } else {
    
  }
  instance_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instance);
  // @@protoc_insertion_point(field_set_allocated:pb.Submission.instance)
}

// string duration = 23;
inline void Submission::clear_duration() {
  duration_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Submission::duration() const {
  // @@protoc_insertion_point(field_get:pb.Submission.duration)
  return duration_.GetNoArena();
}
inline void Submission::set_duration(const ::std::string& value) {
  
  duration_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Submission.duration)
}
#if LANG_CXX11
inline void Submission::set_duration(::std::string&& value) {
  
  duration_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Submission.duration)
}
#endif
inline void Submission::set_duration(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  duration_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Submission.duration)
}
inline void Submission::set_duration(const char* value, size_t size) {
  
  duration_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Submission.duration)
}
inline ::std::string* Submission::mutable_duration() {
  
  // @@protoc_insertion_point(field_mutable:pb.Submission.duration)
  return duration_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Submission::release_duration() {
  // @@protoc_insertion_point(field_release:pb.Submission.duration)
  
  return duration_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Submission::set_allocated_duration(::std::string* duration) {
  if (duration != NULL) {
    
  } else {
    
  }
  duration_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), duration);
  // @@protoc_insertion_point(field_set_allocated:pb.Submission.duration)
}

// double obj = 31;
inline void Submission::clear_obj() {
  obj_ = 0;
}
inline double Submission::obj() const {
  // @@protoc_insertion_point(field_get:pb.Submission.obj)
  return obj_;
}
inline void Submission::set_obj(double value) {
  
  obj_ = value;
  // @@protoc_insertion_point(field_set:pb.Submission.obj)
}

// string email = 32;
inline void Submission::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Submission::email() const {
  // @@protoc_insertion_point(field_get:pb.Submission.email)
  return email_.GetNoArena();
}
inline void Submission::set_email(const ::std::string& value) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Submission.email)
}
#if LANG_CXX11
inline void Submission::set_email(::std::string&& value) {
  
  email_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Submission.email)
}
#endif
inline void Submission::set_email(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Submission.email)
}
inline void Submission::set_email(const char* value, size_t size) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Submission.email)
}
inline ::std::string* Submission::mutable_email() {
  
  // @@protoc_insertion_point(field_mutable:pb.Submission.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Submission::release_email() {
  // @@protoc_insertion_point(field_release:pb.Submission.email)
  
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Submission::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    
  } else {
    
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:pb.Submission.email)
}

// string date = 33;
inline void Submission::clear_date() {
  date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Submission::date() const {
  // @@protoc_insertion_point(field_get:pb.Submission.date)
  return date_.GetNoArena();
}
inline void Submission::set_date(const ::std::string& value) {
  
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Submission.date)
}
#if LANG_CXX11
inline void Submission::set_date(::std::string&& value) {
  
  date_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Submission.date)
}
#endif
inline void Submission::set_date(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Submission.date)
}
inline void Submission::set_date(const char* value, size_t size) {
  
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Submission.date)
}
inline ::std::string* Submission::mutable_date() {
  
  // @@protoc_insertion_point(field_mutable:pb.Submission.date)
  return date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Submission::release_date() {
  // @@protoc_insertion_point(field_release:pb.Submission.date)
  
  return date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Submission::set_allocated_date(::std::string* date) {
  if (date != NULL) {
    
  } else {
    
  }
  date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), date);
  // @@protoc_insertion_point(field_set_allocated:pb.Submission.date)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_RWA_2eproto
